===============================================================================
                        Windows Single Sign On in jTDS
                             ~~~~~~~~~~~~~~~
              Patch Submitted by Magendran Sathaiah (mahi@aztec.soft.net)
===============================================================================

Introduction:
=============
    This document is to explain the design for a patch that is being submitted
    as an enhancement to the jTDS JDBC driver.

    As of now (release 0.9), jTDS driver DOES support Windows authentication by
    means of the NTLM protocol. That is, clients who use the JDBC Driver will
    pass a valid Windows-Domain-Name, a Windows User and Windows Password; the
    JDBC driver will submit these to Microsoft SQL Server via NTLM protocol in
    order to gain access to the database.

    In the above approach the client will have to maintain a configuration file
    to keep the windows logon credentials. That is, the domain name, user name
    and password need to be stored in encrypted or plain text format. This
    might not be an acceptable solution for everybody.

    Can it use current window user's credentials to connect to SQL Server?
    (Windows Single Sign On)

    That is, what if we could make the jTDS driver capable of using the Windows
    credentials of the current user under whose account the client program is
    running. Would it not make life easier for everybody?

    The patch being submitted addresses this goal. That is, with this patch
    clients will be able to connect to Microsoft SQL Server without providing
    credentials. It would dynamically read current user's credentials and
    connect to the database; provided that the Windows account has enough
    rights in the database. That is, here after the driver can do Windows
    Single Sign On with MS SQL Server using this patch.


Design:
=======

    The patch comprises the following components:

    1. ntlmauth.dll
        A CPP Program that uses SSPI Windows APIs to accquire credentials and
        NTLM messages from the Windows Operating System.

    2. SSPIJNIClient.java
        A Java Native Interface class that bridges jTDS JDBC driver and
        ntlmauth.dll.

    3. Modified Version jTDS source files.
        A set of modified jTDS java files that make use of the
        SSPIJNIClient.java when the driver is set to use Windows Single Sign On.


SSPIJNIClient.java
==================

    It loads the DLL (ntlmauth.dll) in a static block. So the ntlmauth.dll must
    be available in the PATH variable. It exposes the following APIs:

    public static SSPIJNIClient getInstance() throws Exception;

        Retuns the singleton SSPIJNIClient object.

    private native void initialize();

        Initializes the SSPI Client.

    private native void unInitialize();

        Uninitializes the SSPI client.

    private native byte[] prepareSSORequest();

        Prepares NTLM TYPE-1 message and returns it as a byte[].

    private native byte[] prepareSSOSubmit(byte[] challengeBuf, long size);

        Prepares NTLM TYPE-3 message using current user's credentials. It needs
        the challenge BLOB and its size as input. The challenge BLOB is nothing
        but the TYPE-2 message that is received from the SQL Server.

    API Usage:
    ----------

            ntlmAuthSSO = (user == null || user.length() == 0);
        	if (ntlmAuthSSO) {
        		sspiJNIClient = SSPIJNIClient.getInstance();
        		ntlm1 = sspiJNIClient.invokePrepareSSORequest();
        	}

            // 1.ntlm1 contains Type-1 message now
            // 2.Send Type-1 Message to the server
            //
            // 3.MS SQL Server replies back with Type-2 message
            // 4.Read Type-2 Message in (say) ntlm2

       		ntlm3 = sspiJNIClient.invokePrepareSSOSubmit(ntlm2);

            //1.now, ntlm3 contains Type-3 message
            //2.Send, Type-3 message to the Server.
            //3.Check the status - Success | Failure.

Modifications to jTDS Classes
=============================
        The Tds.java has been modified as below

        1. Member boolean variable: ntlmAuthSSO
            A flag that is used to indicate if the client wants to do Windows
            Single Sign On. The variable is set in the logon(...) as below

            ntlmAuthSSO = (domain.length > 0 && user.equals("$WINDOWS_USER$");

	    Note: The user must set the user name exactly as "$WINDOWS_USER$" and
		  set a non-empty string as the domian name say "MY_DOMAIN" to
                  set the driver to use window authentication

        2. Member Variable: sspiJNIClient
            A reference to the single-ton object of SSPIJNIClient.class
            It gets initialzied in logon(..) if ntlmAuthSSO is TRUE

        3.  login(..)
            At the begining of the method check if Windows Single Sign On is
            requested;ntlmAuth == TRUE

            If so initialize the SSPI client and prepare NTLM TYPE-1 message

        4. send70Login(..)
            Modified to accept an additional byte[] parameter to pass the NTLM
            Type-1 message.

            Set the authLen = ntlmMessage.legnth() if ntlmAuthSSO is TRUE

        5. sendNtlmChallengeResponse(...)

           If ntlmAuthSSO is TRUE, then read the Type-2 message from
           authToken.getNTLMMessage()

           Prepare Type-3 message as below

           type3 = sspiJNIClient.invokePrepareSSOSubmit(type2)

           Then append it to the command buffer.


jTDS Driver Usage:
==================

    In order to set up the jTDS driver to use Windows Single Sign On, users
    will have to connect without providing a user name and password. This will
    only work on Windows.

    Example:

        ds = new TdsDataSource();
        ds.setDescription("test");

        // MS SQL Server Host Name
        ds.setServerName("localhost");

        // Port
        ds.setPortNumber(1433);

        // Database Name
        ds.setDatabaseName("LionKing");

        // No domain name
        // No user name

        Connection conn = ds.getConnection();
------------------------------------------------------------------------------------------------------
Magendran Sathaiah
mahi@aztec.soft.net